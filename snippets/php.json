{
	// Place your snippets for php here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Public method": {
		"prefix": "met",
		"body": [
			"public function ${1:methodName}(${2})",
			"{",
			"    ${0:# code...}",
			"}"
		],
		"description": "Create public class method"
	},

	"Protected method": {
		"prefix": "pmet",
		"body": [
			"protected function ${1:methodName}(${2})",
			"{",
			"    ${0:# code...}",
			"}"
		],
		"description": "Create protected class method"
	},

	"Private method": {
		"prefix": "prmet",
		"body": [
			"private function ${1:methodName}(${2})",
			"{",
			"    ${0:# code...}",
			"}"
		],
		"description": "Create Private class method"
	},

	"Dump AST via PHP Parser": {
		"prefix": "dumpast",
		"body": [
			"var_dump((new \\PhpParser\\NodeDumper)->dump($$stmts));${0:exit;}"
		],
		"description": "Dump AST via PHP Parser and exit"
	},

	"Tracy Dump": {
		"prefix": "tdum",
		"body": [
			"\\Tracy\\Debugger::dump(${1:'here'});${0}"
		],
		"description": "Dump vars using tracy dump() function"
	},
}